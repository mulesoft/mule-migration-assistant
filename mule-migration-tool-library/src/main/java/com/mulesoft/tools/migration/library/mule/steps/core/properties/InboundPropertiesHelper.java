/*
 * Copyright (c) 2017 MuleSoft, Inc. This software is protected under international
 * copyright law. All use of this software is subject to MuleSoft's Master Subscription
 * Agreement (or other master license agreement) separately entered into in writing between
 * you and MuleSoft. If such an agreement is not in place, you may not use the software.
 */
package com.mulesoft.tools.migration.library.mule.steps.core.properties;

import static com.mulesoft.tools.migration.library.mule.steps.core.dw.DataWeaveHelper.getMigrationScriptFolder;
import static com.mulesoft.tools.migration.library.mule.steps.core.dw.DataWeaveHelper.scriptWithHeader;
import static java.lang.String.format;
import static java.lang.System.lineSeparator;
import static java.nio.charset.StandardCharsets.UTF_8;
import static org.apache.commons.io.FileUtils.forceDelete;

import com.mulesoft.tools.migration.project.model.ApplicationModel;

import org.apache.commons.io.IOUtils;
import org.apache.commons.io.filefilter.SuffixFileFilter;
import org.apache.commons.lang3.StringUtils;

import java.io.File;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.nio.file.Path;
import java.util.Map;
import java.util.Map.Entry;

/**
 * Allows multiple migration tasks to contribute on the generation of the attributes to inboundProperties script.
 *
 * @author Mulesoft Inc.
 * @since 1.0.0
 */
public class InboundPropertiesHelper {

  private static final String TMP_INBOUND_PROP_DW_FRAGMENT_SUFFIX = ".dwl_tmp";

  public static void addAttributesMapping(ApplicationModel appModel, String attributesClassName,
                                          Map<String, String> expressionsPerProperty,
                                          String... additionalInboundProps)
      throws IOException {

    File migrationScriptFolder = getMigrationScriptFolder(appModel.getProjectBasePath());
    migrationScriptFolder.mkdirs();

    try (FileWriter writer =
        new FileWriter(new File(migrationScriptFolder, attributesClassName + TMP_INBOUND_PROP_DW_FRAGMENT_SUFFIX))) {
      writer.write("{" + lineSeparator());

      boolean firstLine = true;
      for (Entry<String, String> mapping : expressionsPerProperty.entrySet()) {
        if (firstLine) {
          firstLine = false;
        } else {
          writer.write("," + lineSeparator());
        }

        writer.write(format("    '%s': %s", mapping.getKey(), mapping.getValue()));
      }

      writer.write(lineSeparator() + "}" + lineSeparator());

      for (String aip : additionalInboundProps) {
        // No lambda because it messes up with checked exceptions...
        writer.write(" ++ " + aip + lineSeparator());
      }

      writer.flush();
    }
  }

  public static void aggregateAttributesMapping(Path basePath) throws IOException {
    File migrationScriptFolder = getMigrationScriptFolder(basePath);

    if (!migrationScriptFolder.exists()) {
      // No rules generated by other tasks, nothing to do.
      return;
    }

    StringBuilder attributes2inboundProperties = new StringBuilder();
    File[] listFiles =
        migrationScriptFolder.listFiles((FilenameFilter) new SuffixFileFilter(TMP_INBOUND_PROP_DW_FRAGMENT_SUFFIX));
    for (File file : listFiles) {
      attributes2inboundProperties
          .append(format("if (message.attributes.^class == '%s')",
                         StringUtils.substring(file.getName(), 0, -1 * TMP_INBOUND_PROP_DW_FRAGMENT_SUFFIX.length()))
              + lineSeparator());

      attributes2inboundProperties.append(IOUtils.toString(file.toURI(), UTF_8));

      forceDelete(file);

      attributes2inboundProperties.append("else" + lineSeparator());
    }
    attributes2inboundProperties.append("{}" + lineSeparator());

    scriptWithHeader(migrationScriptFolder, "attributes2inboundProperties.dwl", "application/java",
                     attributes2inboundProperties.toString());
  }
}

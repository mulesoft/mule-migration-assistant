<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:throttling="http://www.mulesoft.org/schema/mule/throttling"
      xmlns:http-policy="http://www.mulesoft.org/schema/mule/http-policy"
      xmlns:http-transform="http://www.mulesoft.org/schema/mule/http-policy-transform"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/policy
        http://www.mulesoft.org/schema/mule/policy/current/mule-policy.xsd
        http://www.mulesoft.org/schema/mule/api-platform-gw
        http://www.mulesoft.org/schema/mule/api-platform-gw/current/mule-api-platform-gw.xsd
        http://www.mulesoft.org/schema/mule/throttling-gw
        http://www.mulesoft.org/schema/mule/throttling-gw/current/mule-throttling-gw.xsd
        http://www.mulesoft.org/schema/mule/http-policy
        http://www.mulesoft.org/schema/mule/http-policy/current/mule-http-policy.xsd
        http://www.mulesoft.org/schema/mule/throttling
        http://www.mulesoft.org/schema/mule/throttling/current/mule-throttling.xsd
        http://www.mulesoft.org/schema/mule/http-policy-transform
        http://www.mulesoft.org/schema/mule/http-policy-transform/current/mule-http-policy-transform.xsd
        http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd">

    <throttling:config name="rateLimitConfig" clusterizable="true">
        <throttling:tier-provider>
            <throttling:explicit>
                <throttling:keys>
                    <throttling:key>
                        <throttling:tiers>
                            {{#rateLimits}}
                            <throttling:tier maximumRequestsPerPeriod="{{maximumRequests}}"
                                             timePeriodMillis="{{timePeriodInMilliseconds}}"/>
                            {{/rateLimits}}
                        </throttling:tiers>
                    </throttling:key>
                </throttling:keys>
            </throttling:explicit>
        </throttling:tier-provider>
    </throttling:config>

    <http-policy:proxy name="rate-limiting-sla-based">
        <http-policy:source>
            <try>

                <throttling:rate-limit id="{{policyId}}-rate-limit-sla"
                                       clientId="{{goldId}}"
                                       clientSecret="{{goldSecret}}"
                                       config-ref="rateLimitSlaConfig"
                                       target="throttlingResponse"/>

                <throttling:rate-limit id="{{policyId}}-rate-limit" config-ref="rateLimitConfig"
                                       target="throttlingResponse"/>

                <http-policy:execute-next/>

                <http-transform:add-headers outputType="response">
                    <http-transform:headers>#[
                        {
                        'x-ratelimit-remaining': vars.throttlingResponse.availableQuota as String,
                        'x-ratelimit-limit': vars.throttlingResponse.maximumAllowedRequests as String,
                        'x-ratelimit-reset': vars.throttlingResponse.remainingFrame as String
                        }
                        ]
                    </http-transform:headers>
                </http-transform:add-headers>

                <error-handler>
                    <on-error-continue type="THROTTLING:QUOTA_EXCEEDED" logException="false">
                        <http-transform:set-response statusCode="429">
                            <http-transform:body>#[
                                output application/json
                                ---
                                {"error": "$(error.description)"}
                                ]
                            </http-transform:body>
                            <http-transform:headers>#[
                                {
                                'x-ratelimit-remaining': error.exception.availableQuota as String,
                                'x-ratelimit-limit': error.exception.maximumAllowedRequests as String,
                                'x-ratelimit-reset': error.exception.remainingFrame as String
                                }
                                ]
                            </http-transform:headers>
                        </http-transform:set-response>
                    </on-error-continue>
                    <on-error-propagate>
                        <http-transform:add-headers outputType="response">
                            <http-transform:headers>#[
                                {
                                'x-ratelimit-remaining': vars.throttlingResponse.availableQuota as String,
                                'x-ratelimit-limit': vars.throttlingResponse.maximumAllowedRequests as String,
                                'x-ratelimit-reset': vars.throttlingResponse.remainingFrame as String
                                }
                                ]
                            </http-transform:headers>
                        </http-transform:add-headers>
                    </on-error-propagate>
                    <on-error-continue type="THROTTLING:FORBIDDEN_CLIENT" logException="false">
                        <http-transform:set-response statusCode="401">
                            <http-transform:body>#[
                                output application/json
                                ---
                                {"error": "$(error.description)"}
                                ]
                            </http-transform:body>
                            <http-transform:headers>#[{'WWW-Authenticate': 'Client-ID-Enforcement'}]
                            </http-transform:headers>
                        </http-transform:set-response>
                    </on-error-continue>
                    <on-error-continue type="THROTTLING:UNKNOWN_API" logException="false">
                        <http-transform:set-response statusCode="503">
                            <http-transform:body>#[
                                output application/json
                                ---
                                {"error": "$(error.description)"}
                                ]
                            </http-transform:body>
                        </http-transform:set-response>
                    </on-error-continue>


                </error-handler>
            </try>
        </http-policy:source>
    </http-policy:proxy>

    <throttling:config name="rateLimitSlaConfig" clusterizable="true">
        <throttling:tier-provider>
            <throttling:validate-client apiId="${apiId}"/>
        </throttling:tier-provider>
    </throttling:config>

</mule>
